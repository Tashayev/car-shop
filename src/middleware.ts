import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { jwtVerify } from "jose";

const PUBLIC_PATHS = ["/auth"];

export async function middleware(req: NextRequest) {
  const { pathname } = req.nextUrl;
  console.log("–º–∏–¥–ª–≤–∞—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:", pathname);

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º api –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ –ø—É—Ç–∏
  if (pathname.startsWith("/api") || pathname.startsWith("/_next")) {
    console.log("–∞–ø–∏/—Å–µ—Ä–≤–∏—Å–Ω—ã–µ –ø—É—Ç–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
    return NextResponse.next();
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏ (auth/*)
  if (PUBLIC_PATHS.some((path) => pathname.startsWith(path))) {
    console.log("‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –ø—É—Ç—å:", pathname);
    return NextResponse.next();
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  const token = req.cookies.get("token")?.value;
  console.log("üîë –¢–æ–∫–µ–Ω –∏–∑ cookies:", token);

  if (!token) {
    console.log("–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ /auth/login");
    return NextResponse.redirect(new URL("/auth/login", req.url));
  }

  try {
    const secret = new TextEncoder().encode(process.env.JWT_SECRET);
    const { payload } = await jwtVerify(token, secret);

    console.log("—Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω:", payload);
    return NextResponse.next();
  } catch (err) {
    console.log("–¢–æ–∫–µ–Ω –±–∏—Ç—ã–π ‚Üí —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ /auth/login");
    return NextResponse.redirect(new URL("/auth/login", req.url));
  }
}

export const config = {
  matcher: [
    // middleware —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –í–°–ï –ø—É—Ç–∏ –∫—Ä–æ–º–µ api, —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∞—Å—Å–µ—Ç–æ–≤ –∏ favicon
    "/((?!api|_next/static|_next/image|favicon.ico|assets).*)",
  ],
};
