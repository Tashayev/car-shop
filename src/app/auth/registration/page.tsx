"use client";

import "./register.scss";
import { useState } from "react";
import { useRouter } from "next/navigation";
import Eye from "/public/pass/eye.svg";
import Noeye from "/public/pass/noeye.svg";


export default function RegisterPage() {
  const router = useRouter();

  const [form, setForm] = useState({
    email: "",
    name: "",
    password: "",
    confirmPassword: "",
  });

  const [errors, setErrors] = useState<{ [key: string]: string }>({});
  const [loading, setLoading] = useState(false);
  const [visible, setVisible] = useState(false);
  const [confirm, setConfirm] = useState(false);


  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const validate = () => {
    const newErrors: { [key: string]: string } = {};

    if (!form.name.trim()) {
      newErrors.name = "–í–≤–µ–¥–∏—Ç–µ –∏–º—è";
    }
    if (!form.email.includes("@")) {
      newErrors.email = "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email";
    }
    if (form.password.length < 6) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 6 —Å–∏–º–≤–æ–ª–æ–≤";
    }

    if (!/[0-9]/.test(form.password)) {
      newErrors.password = "–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ü–∏—Ñ—Ä—É";
    }
    if (form.password !== form.confirmPassword) {
      newErrors.confirmPassword = "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!validate()) return;

    setLoading(true);

    try {
      const res = await fetch("/api/auth/registration", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          email: form.email,
          password: form.password,
          name: form.name,
        }),
      });

      if (res.ok) {
        router.push("/dashboard");
      } else {
        const data = await res.json();
        alert(data.error || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏");
      }
    } finally {
      setLoading(false);
    }
    console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º:", {
      email: form.email,
      password: form.password,
      name: form.name,
    });

  };

  return (
    <div >
      <div className="register-page">
        <h1>–õ–û–ì–û–¢–ò–ü</h1>
        <h3>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</h3>
        <form onSubmit={handleSubmit}>
          <label htmlFor="name">–õ–æ–≥–∏–Ω</label>
          <input
            type="text"
            name="name"
            placeholder="–ò–º—è"
            value={form.name}
            onChange={handleChange}
          />
          {errors.name && <p className="error">{errors.name}</p>}

          <label htmlFor="email">Mail</label>
          <input
            type="email"
            name="email"
            placeholder="Email"
            value={form.email}
            onChange={handleChange}
          />
          {errors.email && <p className="error">{errors.email}</p>}

          <label htmlFor="password">–ü–∞—Ä–æ–ª—å</label>
          <div className="pass">
            <input
              type={visible ? "text" : "password"}
              name="password"
              placeholder="–ü–∞—Ä–æ–ª—å"
              value={form.password}
              onChange={handleChange}
            />
            <span onClick={() => setVisible(!visible)} className="eye">
              {visible ? (
                <Noeye width={24} height={18} />
              ) : (
                <Eye width={24} height={15} />
              )}
            </span>
            {errors.password && <p className="error">{errors.password}</p>}
          </div>

          <label htmlFor="confirmPassword">–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å</label>
          <div className="pass">
            <input
              type={confirm ? "text" : "password"}
              name="confirmPassword"
              placeholder="–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
              value={form.confirmPassword}
              onChange={handleChange}
            />
            <span onClick={() => setConfirm(!confirm)} className="eye">
              {confirm ? (
                <Noeye width={24} height={18} />
              ) : (
                <Eye width={24} height={15} />
              )}
            </span>
            {errors.confirmPassword && (
              <p className="error">{errors.confirmPassword}</p>
            )}
          </div>

          <button className="sub-btn" type="submit" disabled={loading}>
            {loading ? "‚è≥ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è..." : "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"}
          </button>
        </form>
        <div className="other">
          <div className="or-wrapper">
            <div className="line"></div>
            <p className="or">–∏–ª–∏</p>
            <div className="line"></div>
          </div>
          <div className="log-btn" onClick={() => router.push("/auth/login")}>
            <span>–í—Ö–æ–¥</span>
          </div>
        </div>
      </div>
    </div>
  );
}
